events {
}

http {
  server {
    listen 3001;

    location / {
      set_by_lua_block $skipFetchCache {
        local headers = ngx.req.get_headers()
        if string.match(ngx.var.request_uri, "demo") ~= nil then
          return 1
        end
  
        return 0
      }

      set_by_lua_block $reqUri {
        return ngx.var.request_uri
      }

      set_by_lua_block $extraCacheKey {
        local headers = ngx.req.get_headers()
        if string.match(ngx.var.request_uri, "demo") ~= nil then
          return "extraKey" .. ngx.var.request_uri
        end
  
        return ""
      }

      set $cacheKey $extraCacheKey$host$request_uri;
      set_sha1 $hashedCacheKey $cacheKey;

      srcache_fetch GET /memc/ $hashedCacheKey;
      srcache_store PUT /memc/ $hashedCacheKey;

      more_set_headers "X-args: $args";
      more_set_headers "X-uri: $reqUri";
      more_set_headers "X-cached-key: $cacheKey";
      more_set_headers "X-cached-hashkey: $hashedCacheKey";
      more_set_headers "X-cached-skip: $skipFetchCache";
      more_set_headers "X-cached: $srcache_fetch_status";

      proxy_pass_request_headers  on;
      proxy_pass http://nodeapp:3000/;
    }

    location = /memc/ {
      internal;

      memc_connect_timeout 100ms;
      memc_send_timeout 300ms;
      memc_read_timeout 300ms;
      memc_ignore_client_abort on;

      set $memc_key $query_string;
      set $memc_key $query_string;

      memc_pass memc:11211;
    }
  }
}
